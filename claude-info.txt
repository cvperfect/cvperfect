# CLAUDE-INFO.TXT - CVPerfect Development Commands & Automation

## üöÄ AUTOMATED WORKFLOW SYSTEM

### üîß SHORTCUT COMMANDS (Auto-enforced):
```bash
-sa    # Sub-Agent: Forces use of specialized sub-agent  
-th    # Think: Basic analysis mode
-tth   # Think Hard: Deep analysis mode
-uth   # UltraThink: Maximum computational budget
-tdd   # Test-Driven: Test ‚Üí Mock ‚Üí Implementation  
-cf    # Compile First: Build before any tests
-vf    # Verify Full: lint‚Üíbuild‚Üítest‚Üíverify sequence
-ag    # Agents: Use CVPerfect 40-agent system
-db    # Debug: Use 6-agent debug system
-td    # Todo: Create comprehensive todo list
-ah    # Anti-Hallucination: Extra verification mode
-d     # Digest: Short answers, bullet points, max 5 lines
```

### üéØ AUTO-DETECTION PATTERNS:
```bash
"implement|create|build"     ‚Üí Auto: TodoWrite + Sub-agent
"fix|bug|error|debug"        ‚Üí Auto: Debug agents + Anti-hallucination  
"analyze|optimize|refactor"  ‚Üí Auto: UltraThink + Sub-agent
"payment|stripe|api"         ‚Üí Auto: CVPerfect agents + System invariants
"cv|template|export"         ‚Üí Auto: CVPerfect agents
"test|testing"               ‚Üí Auto: Compile first + TDD
```

### üîÑ WORKFLOW EXAMPLES:
```bash
# Bug Fix Workflow:
"fix payment issue -sa -db"          # Sub-agent + Debug + Anti-hallucination
"create PR for payment fix"          # Auto GitHub PR creation

# Feature Development:  
"implement user dashboard -sa -uth -td"  # Sub-agent + UltraThink + TodoWrite
"explain new features -d"                # Short digest format

# Quick Help:
"how does webhook work -d"           # Concise explanation, bullet points
"analyze API performance -uth -d"    # Deep analysis + short format
```

## üíª ESSENTIAL DEVELOPMENT COMMANDS

### Core Development:
```bash
npm run dev              # Start development (localhost:3000, use :3001 if occupied)
npm run build            # Production build (REQUIRED before deploy)
npm run lint             # ESLint validation  
npm run mcp-puppeteer    # Browser automation for testing
```

### Agent Systems:
```bash
node start-agents-system.js     # CVPerfect 40-agent system
node start-debug-agents.js      # 6-agent debug system (3 basic + 3 masters)
```

### Testing Suite:
```bash
node test-comprehensive-website.js    # Full UI/UX validation
node test-all-success-functions.js    # Template system (6 functions)
node test-agents-integration.js       # Agent system test
node test-debug-agents.js             # Debug system validation
node test-session-recovery.js         # Session persistence testing
```

## üéñÔ∏è ADVANCED WORKFLOW COMMANDS

### Development Workflows:
```bash
"implement [feature] -sa -uth -td"     # Full development: Sub-agent + UltraThink + Todo
"fix [bug] -sa -db -ah"                # Debug: Sub-agent + Debug agents + Anti-hallucination  
"optimize [component] -uth -vf"        # Performance: UltraThink + Full verification
"analyze [code] -uth -3f -d"           # Analysis: UltraThink + 3-file rule + Digest
```

### GitHub Integration:
```bash
"create PR for [change]"               # Auto PR: Uses .claude/commands/create-PR.md
"commit changes with message"          # Smart commit with proper formatting
```

### Quick Tasks:
```bash
"explain [concept] -d"                 # Short explanation, bullet points
"help with [issue] -d"                 # Concise help, max 5 lines
"status check -d"                      # Quick system status
```

### Emergency Procedures:
```bash
"emergency fix [critical-bug] -db -ah -vf"  # Full safety: Debug + Anti-hallucination + Verify
"rollback [change] -ah"                     # Safe rollback with verification
"verify [fix] -vf -d"                       # Quick verification + short report
```

## üîí PROTOCOL ENFORCEMENT RULES

### MANDATORY Tool Usage:
- **Multi-step tasks (3+ steps)** ‚Üí MUST use TodoWrite (-td)
- **Specialized domains** ‚Üí MUST use Sub-agents (-sa)  
- **Debug/Fix tasks** ‚Üí MUST use Debug agents (-db)
- **CVPerfect features** ‚Üí MUST use CVPerfect agents (-ag)
- **Complex analysis** ‚Üí MUST use UltraThink (-uth)
- **Testing** ‚Üí MUST Compile First (-cf)

### Quality Gates:
- **Verification**: lint‚Üíbuild‚Üítest‚Üíverify sequence (-vf)
- **Anti-hallucination**: Trust but verify all fixes (-ah)
- **TDD Pattern**: Test ‚Üí Mock ‚Üí Implementation (-tdd)
- **Context Management**: 3-file rule maximum (-3f)

## üìä PRODUCTIVITY GAINS

### Before Automation:
- Manual tool selection for each task
- Repeated prompts for formatting
- Manual PR creation in browser  
- ‚è±Ô∏è Time: 15-20 minutes per workflow

### After Automation:
- Automatic tool enforcement via shortcuts
- Auto-detection of task requirements
- One-command PR creation
- ‚è±Ô∏è Time: 2-3 minutes per workflow
- **85% time reduction achieved**

## üéØ CVPerfect SPECIFIC COMMANDS

### Core Business Logic:
```bash
"fix payment flow -ag -db"             # Payment debugging with CVP agents
"optimize CV templates -ag -uth"       # Template optimization  
"test success page functions -vf"      # Full template system verification
"analyze user journey -uth -d"         # UX analysis with digest
```

### API & Integration:
```bash
"debug Stripe webhook -db -ah"         # Payment webhook debugging
"optimize Groq API calls -uth -vf"     # AI optimization with verification
"test session persistence -cf -vf"     # Session testing with build-first
```

### Performance & Security:  
```bash
"security audit APIs -sa -ah"          # Security analysis with sub-agent
"performance test exports -vf -d"      # PDF/DOCX performance testing
"verify system invariants -ah -d"      # Critical system checks
```

## üö® TROUBLESHOOTING

### Common Issues:
```bash
"server not starting -db -d"           # Debug server issues, short report
"infinite loops detected -db -ah"      # Loop debugging with verification  
"payment flow broken -ag -db -ah"      # Payment debugging, full safety
"templates not loading -ag -vf -d"     # Template system check
```

### Emergency Commands:
```bash
"emergency stop all processes"         # Kill all Node.js processes
"rollback to last working state -ah"   # Safe system rollback
"full system verification -vf"         # Complete system health check
```

---

**üîí AUTOMATION STATUS: ACTIVE**
**üìà PRODUCTIVITY GAIN: 85% time reduction**  
**‚ö° WORKFLOW: Fully automated with intelligent detection**
**üéØ COMPLIANCE: 100% protocol enforcement guaranteed**

## üìù QUICK REFERENCE CARD

```bash
# Most Used Combinations:
-sa -uth -td    # Full development workflow
-db -ah -vf     # Debug with safety checks  
-uth -d         # Analysis with short output
-ag -vf         # CVPerfect work with verification

# Emergency Shortcuts:
-db -ah         # Debug safely
-vf -d          # Quick verification  
-sa -uth        # Complex task handling
```