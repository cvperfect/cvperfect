// success.js - Part 1
// CV Optimization Application - Success Page Component
// This component handles the display and management of optimized CVs after payment

import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import Head from 'next/head'
import html2canvas from 'html2canvas'
import { jsPDF } from 'jspdf'
import { Document, Packer, Paragraph, TextRun, HeadingLevel } from 'docx'
import { saveAs } from 'file-saver'
import DOMPurify from 'dompurify'
import ErrorBoundary from '../components/ErrorBoundary'

/**
 * Main Success Component
 * Handles CV display, optimization, and export after successful payment
 */
function Success() {
  // ============================================
  // SECTION 1: XSS PROTECTION & SANITIZATION
  // ============================================
  
  // Expose DOMPurify globally for testing purposes
  useEffect(() => {
    if (typeof window !== 'undefined') {
      window.DOMPurify = DOMPurify;
    }
  }, []);

  /**
   * Sanitizes HTML content to prevent XSS attacks
   * @param {string} htmlContent - Raw HTML content to sanitize
   * @returns {string} Sanitized HTML safe for rendering
   */
  const sanitizeHTML = (htmlContent) => {
    if (typeof window !== 'undefined' && htmlContent) {
      return DOMPurify.sanitize(htmlContent, {
        ALLOWED_TAGS: ['div', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'br', 'strong', 'b', 'em', 'i', 'u', 'ul', 'ol', 'li', 'span', 'img', 'section', 'article'],
        ALLOWED_ATTR: ['class', 'style', 'src', 'alt', 'href', 'title', 'id'],
        KEEP_CONTENT: true,
        FORBID_SCRIPT: true
      });
    }
    return htmlContent || '';
  };

  // ============================================
  // SECTION 2: UTILITY FUNCTIONS
  // ============================================
  
  /**
   * Retrieves cookie value by name
   * @param {string} name - Cookie name
   * @returns {string|null} Cookie value or null if not found
   */
  const getCookie = (name) => {
    if (typeof document === 'undefined') return null;
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop().split(';').shift();
    return null;
  };

  /**
   * Extracts name from CV text content
   * @param {string} cvText - Raw CV text
   * @returns {string} Extracted name or default
   */
  const extractNameFromCV = (cvText) => {
    if (!cvText) return 'Jan Kowalski';
    
    // Try HTML parsing first
    if (cvText.includes('<h1')) {
      const h1Match = cvText.match(/<h1[^>]*>(.*?)<\/h1>/i);
      if (h1Match) return h1Match[1].replace(/<[^>]*>/g, '').trim();
    }
    
    // Try plain text parsing
    const lines = cvText.split('\n').map(line => line.trim()).filter(line => line.length > 0);
    if (lines.length > 0) {
      const firstLine = lines[0];
      const cleanName = firstLine
        .replace(/^(CV|Resume|Curriculum Vitae)/i, '')
        .replace(/[^\w\s\-]/g, '')
        .trim();
      return cleanName || 'Jan Kowalski';
    }
    
    return 'Jan Kowalski';
  };

  // ============================================
  // SECTION 3: STATE MANAGEMENT ARCHITECTURE
  // ============================================
  
  /**
   * Core application data that changes rarely
   */
  const [coreData, setCoreData] = useState({
    cvData: null,           // Main CV data object
    userPlan: 'premium'     // User subscription plan: basic, gold, or premium
  });
  
  /**
   * UI state that changes frequently
   */
  const [uiState, setUiState] = useState({
    selectedTemplate: 'simple',  // Currently selected CV template
    isDemoMode: false,           // Demo mode flag for testing
    modals: {                    // Modal visibility states
      email: false,
      template: false,
      export: false,
      recovery: false
    }
  });
  
  /**
   * Loading and operation states
   */
  const [loadingState, setLoadingState] = useState({
    isInitializing: true,    // Initial data loading
    isOptimizing: false,      // AI optimization in progress
    isExporting: false,       // Export operation in progress
    hasNoSession: false       // No valid session found
  });
  
  /**
   * Email recovery state for session restoration
   */
  const [recoveryState, setRecoveryState] = useState({
    email: '',
    isRecovering: false
  });
  
  /**
   * ATS (Applicant Tracking System) metrics
   */
  const [metricsState, setMetricsState] = useState({
    atsScore: 45,         // Initial ATS compatibility score
    optimizedScore: 95    // Score after AI optimization
  });

  /**
   * Notification system state
   */
  const [notifications, setNotifications] = useState([]);

  // ============================================
  // SECTION 4: REFS FOR DOM ELEMENTS & CLEANUP
  // ============================================
  
  const cvPreviewRef = useRef(null);           // Reference to CV preview container
  const timeoutRefs = useRef([]);              // Track timeouts for cleanup
  const initializationRef = useRef(false);     // Prevent double initialization
  const cache = useRef({});                    // Simple data cache

  // ============================================
  // SECTION 5: NOTIFICATION SYSTEM
  // ============================================
  
  /**
   * Adds a notification to the display queue
   * @param {string|Object} messageOrObj - Message string or notification object
   * @param {string} type - Notification type (success, error, info, warning)
   */
  const addNotification = useCallback((messageOrObj, type) => {
    const id = Date.now() + Math.random();
    
    let notification;
    if (typeof messageOrObj === 'string') {
      // Legacy syntax support: addNotification(message, type)
      notification = { 
        id, 
        message: messageOrObj, 
        type, 
        timestamp: new Date().toISOString() 
      };
    } else {
      // Modern syntax: addNotification({type, title, message, context})
      notification = { 
        id, 
        timestamp: new Date().toISOString(), 
        ...messageOrObj 
      };
    }
    
    setNotifications(prev => [...prev, notification]);
    
    // Auto-remove non-error notifications after 5 seconds
    if (notification.type !== 'error') {
      const timeoutId = setTimeout(() => {
        setNotifications(prev => prev.filter(n => n.id !== id));
      }, 5000);
      
      notification.timeoutId = timeoutId;
    }
  }, []);

  // ============================================
  // SECTION 6: BACKWARD COMPATIBILITY INTERFACE
  // ============================================
  
  /**
   * Legacy appState interface for backward compatibility
   * Combines all state objects into a single interface
   */
  const appState = useMemo(() => ({
    ...coreData,
    ...uiState,
    ...loadingState,
    ...metricsState
  }), [coreData, uiState, loadingState, metricsState]);
  
  /**
   * Smart state updater that routes updates to correct sub-state
   * @param {Object} updates - State updates to apply
   * @param {string} source - Source identifier for debugging
   */
  const updateAppState = useCallback((updates, source = 'unknown') => {
    const coreFields = ['cvData', 'userPlan'];
    const uiFields = ['selectedTemplate', 'modals', 'isDemoMode'];
    const loadingFields = ['isInitializing', 'isOptimizing', 'isExporting', 'hasNoSession'];
    const metricsFields = ['atsScore', 'optimizedScore'];
    
    // Separate updates by category
    const coreUpdates = {};
    const uiUpdates = {};
    const loadingUpdates = {};
    const metricsUpdates = {};
    
    for (const [key, value] of Object.entries(updates)) {
      if (coreFields.includes(key)) {
        coreUpdates[key] = value;
      } else if (uiFields.includes(key)) {
        uiUpdates[key] = value;
      } else if (loadingFields.includes(key)) {
        loadingUpdates[key] = value;
      } else if (metricsFields.includes(key)) {
        metricsUpdates[key] = value;
      }
    }
    
    // Apply updates to appropriate states
    if (Object.keys(coreUpdates).length > 0) {
      setCoreData(prev => ({ ...prev, ...coreUpdates }));
    }
    if (Object.keys(uiUpdates).length > 0) {
      setUiState(prev => ({ ...prev, ...uiUpdates }));
    }
    if (Object.keys(loadingUpdates).length > 0) {
      setLoadingState(prev => ({ ...prev, ...loadingUpdates }));
    }
    if (Object.keys(metricsUpdates).length > 0) {
      setMetricsState(prev => ({ ...prev, ...metricsUpdates }));
    }
    
    console.log(`üìù State updated (${source}):`, updates);
  }, []);

  // ============================================
  // SECTION 7: HELPER FUNCTIONS
  // ============================================
  
  /**
   * Updates CV data with proper structure validation
   * @param {string|Object} data - CV data as string or structured object
   */
  const setCvData = (data) => {
    console.log('üîß setCvData called with:', {
      hasData: !!data,
      dataType: typeof data,
      dataKeys: data && typeof data === 'object' ? Object.keys(data) : []
    });
    
    let cvDataStructure;
    
    if (typeof data === 'string') {
      // Convert raw text to structured format
      cvDataStructure = {
        name: data.match(/^([^\n]+)/)?.[1]?.trim() || 'CV User',
        fullContent: data,
        hasFullContent: true,
        fullContentLength: data.length,
        isOriginal: true,
        timestamp: Date.now(),
        source: 'string_conversion'
      };
    } else if (data && typeof data === 'object') {
      // Ensure proper structure for object data
      cvDataStructure = {
        ...data,
        hasFullContent: true,
        fullContentLength: data.fullContent ? data.fullContent.length : 0,
        timestamp: Date.now()
      };
    } else {
      console.error('‚ùå setCvData received invalid data:', data);
      return;
    }
    
    // Update state and clear loading flags
    updateAppState({ 
      cvData: cvDataStructure,
      isInitializing: false,
      hasNoSession: false
    }, 'cv-data-set');
  };

  /**
   * Updates CV data wrapper for legacy compatibility
   */
  const updateCvData = useCallback((cvData) => {
    updateAppState({ cvData }, 'cv-data-update');
  }, [updateAppState]);

  /**
   * Sets user subscription plan
   * @param {string} plan - Plan type (basic, gold, premium)
   */
  const setUserPlan = (plan) => {
    updateAppState({ userPlan: plan }, 'set-user-plan');
  };

  /**
   * Toggles modal visibility
   * @param {string} modalName - Name of modal to toggle
   * @param {boolean|null} isOpen - Force open/close state or null to toggle
   */
  const toggleModal = useCallback((modalName, isOpen = null) => {
    setUiState(prevState => ({
      ...prevState,
      modals: {
        ...prevState.modals,
        [modalName]: isOpen !== null ? isOpen : !prevState.modals[modalName]
      }
    }));
  }, []);

  // ============================================
  // SECTION 8: CACHE MANAGEMENT
  // ============================================
  
  /**
   * Sets item in cache
   * @param {string} key - Cache key
   * @param {*} value - Value to cache
   */
  const setCacheItem = useCallback((key, value) => {
    cache.current[key] = { value, timestamp: Date.now() };
  }, []);

  /**
   * Gets item from cache
   * @param {string} key - Cache key
   * @returns {*} Cached value or null
   */
  const getCacheItem = useCallback((key) => {
    return cache.current[key]?.value || null;
  }, []);

  // ============================================
  // SECTION 9: ERROR HANDLING
  // ============================================
  
  /**
   * Centralized error handler
   * @param {Error} error - Error object
   * @param {string} context - Context where error occurred
   */
  const handleError = useCallback((error, context = 'unknown') => {
    console.error(`‚ùå Error in ${context}:`, error);
    
    addNotification({
      type: 'error',
      title: 'WystƒÖpi≈Ç b≈ÇƒÖd',
      message: error.message || 'Nieznany b≈ÇƒÖd'
    });
  }, [addNotification]);

  // Continue to Part 2...

// success.js - Part 2
// Continuation: Demo Data, CV Parsing, and AI Optimization

  // ============================================
  // SECTION 10: DEMO DATA GENERATION
  // ============================================
  
  /**
   * Generates consistent demo data for testing and fallback scenarios
   * @param {string} fallbackSessionId - Session ID for demo mode
   * @returns {Object} Demo CV data structure
   */
  const generateFallbackDemoData = (fallbackSessionId) => {
    console.log('üé≠ Generating demo data for fallback session:', fallbackSessionId);
    
    const demoCV = `Anna Kowalska
anna.kowalska@example.com | +48 123 456 789 | Warszawa, Polska

DO≈öWIADCZONY FRONTEND DEVELOPER

Do≈õwiadczony Frontend Developer z 5-letnim do≈õwiadczeniem w tworzeniu nowoczesnych aplikacji webowych. 
Specjalizuje siƒô w React, TypeScript i responsive design. Pasjonat UI/UX z silnymi umiejƒôtno≈õciami wsp√≥≈Çpracy w zespole.

DO≈öWIADCZENIE ZAWODOWE

Senior Frontend Developer | Tech Solutions Sp. z o.o. | Warszawa | 01/2022 - obecnie
- Liderowanie zespo≈Çu 4 programist√≥w w tworzeniu aplikacji e-commerce
- Implementacja responsive design i optymalizacja wydajno≈õci
- Zwiƒôkszenie conversion rate o 25% przez optymalizacjƒô UX
- Mentoring m≈Çodszych developer√≥w

Frontend Developer | Digital Agency | Krak√≥w | 06/2020 - 12/2021
- Rozw√≥j aplikacji SPA w React dla klient√≥w z r√≥≈ºnych bran≈º
- Wsp√≥≈Çpraca z zespo≈Çem UX/UI w tworzeniu przyjaznych interfejs√≥w
- Implementacja responsive design zgodnie z zasadami accessibility

UMIEJƒòTNO≈öCI
- Frontend: React, TypeScript, JavaScript (ES6+), HTML5, CSS3, SASS
- Frameworks: Next.js, Redux, Material-UI, Styled Components
- Tools: Git, Webpack, Jest, Figma, Adobe XD
- Metodyki: Responsive Design, Mobile First, REST API Integration

WYKSZTA≈ÅCENIE
Magister Informatyki | Uniwersytet Warszawski | Warszawa | 2018-2020
Specjalizacja: In≈ºynieria Oprogramowania

JƒòZYKI
- Polski - ojczysty
- Angielski - zaawansowany (C1)
- Niemiecki - podstawowy (A2)`;

    return {
      cvData: demoCV,
      plan: 'premium',
      email: 'demo@cvperfect.pl',
      fallbackSessionId: fallbackSessionId,
      timestamp: Date.now(),
      isDemoMode: true
    };
  };

  // ============================================
  // SECTION 11: CV PARSING FUNCTIONS
  // ============================================
  
  /**
   * Parses CV text into structured data format
   * @param {string} rawCvText - Raw CV text content
   * @returns {Object} Structured CV data
   */
  const parseCvFromText = (rawCvText) => {
    if (!rawCvText) {
      return {
        name: 'Brak danych',
        email: '',
        phone: '',
        experience: [],
        education: [],
        skills: [],
        languages: [],
        fullContent: ''
      };
    }
    
    const lines = rawCvText.split('\n').filter(line => line.trim());
    const name = lines[0] || 'Nieznane';
    
    // Extract contact information
    const emailMatch = rawCvText.match(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/i);
    const email = emailMatch ? emailMatch[1] : '';
    
    const phoneMatch = rawCvText.match(/(\+?\d[\d\s\-\(\)]{8,})/i);
    const phone = phoneMatch ? phoneMatch[1] : '';
    
    // Helper function to extract sections
    const extractSection = (startMarkers, endMarkers = []) => {
      const text = rawCvText.toUpperCase();
      let startIndex = -1;
      
      for (const marker of startMarkers) {
        startIndex = text.indexOf(marker.toUpperCase());
        if (startIndex > -1) break;
      }
      
      if (startIndex === -1) return [];
      
      let endIndex = rawCvText.length;
      for (const endMarker of endMarkers) {
        const idx = text.indexOf(endMarker.toUpperCase(), startIndex + 20);
        if (idx > -1 && idx < endIndex) {
          endIndex = idx;
        }
      }
      
      const sectionText = rawCvText.slice(startIndex, endIndex);
      return sectionText.split('\n')
        .filter(line => line.trim() && !line.match(/^[A-Z\s]+$/))
        .slice(1); // Skip header
    };
    
    // Extract CV sections
    const experience = extractSection(
      ['DO≈öWIADCZENIE', 'EXPERIENCE', 'PRACA'],
      ['WYKSZTA≈ÅCENIE', 'EDUCATION', 'UMIEJƒòTNO≈öCI', 'SKILLS']
    );
    
    const education = extractSection(
      ['WYKSZTA≈ÅCENIE', 'EDUCATION', 'EDUKACJA'],
      ['UMIEJƒòTNO≈öCI', 'SKILLS', 'JƒòZYKI', 'LANGUAGES']
    );
    
    const skills = extractSection(
      ['UMIEJƒòTNO≈öCI', 'SKILLS', 'KOMPETENCJE'],
      ['JƒòZYKI', 'LANGUAGES', 'ZAINTERESOWANIA']
    );
    
    const languages = extractSection(
      ['JƒòZYKI', 'LANGUAGES', 'ZNAJOMO≈öƒÜ JƒòZYK√ìW'],
      ['ZAINTERESOWANIA', 'HOBBY', 'CERTYFIKATY']
    );
    
    return {
      name,
      email,
      phone,
      experience,
      education,
      skills,
      languages,
      fullContent: rawCvText
    };
  };

  /**
   * Converts markdown formatting to HTML for display
   * @param {string} markdown - Markdown formatted text
   * @returns {string} HTML formatted text
   */
  const parseMarkdownToHTML = useCallback((markdown) => {
    if (!markdown || typeof markdown !== 'string') return '';
    
    let html = markdown
      // Convert **bold** to <strong>
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      // Convert bullet points to list items
      .replace(/^\s*\*\s+(.+)$/gm, '<li>$1</li>')
      // Convert sub-points to nested list items
      .replace(/^\s*\+\s+(.+)$/gm, '<li class="sub-item ml-4">$1</li>')
      // Convert headers
      .replace(/^\*\*([^*]+):\*\*\s*/gm, '<h3 class="font-bold text-lg mt-4 mb-2 text-blue-600">$1</h3>')
      .replace(/^\*\*([^*]+)\*\*\s*$/gm, '<h3 class="font-bold text-lg mt-4 mb-2 text-blue-600">$1</h3>')
      // Convert line breaks
      .replace(/\n/g, '<br>')
      // Group list items into <ul> tags
      .replace(/(<li[^>]*>.*?<\/li>(<br>)*)+/g, (match) => {
        const cleanMatch = match.replace(/<br>/g, '');
        return `<ul class="list-disc ml-6 mb-4">${cleanMatch}</ul>`;
      })
      // Clean up extra breaks
      .replace(/<br>\s*<br>\s*<br>/g, '<br><br>')
      .replace(/<br>\s*<h3/g, '<h3')
      .replace(/<\/h3><br>/g, '</h3>')
      .replace(/<br>\s*<ul/g, '<ul')
      .replace(/<\/ul><br>/g, '</ul>');
    
    return html;
  }, []);

  /**
   * Prepares CV data for AI optimization
   * @param {Object} data - CV data object
   * @returns {string} Formatted CV text for AI processing
   */
  const prepareCVForOptimization = (data) => {
    if (!data) {
      console.log('‚ö†Ô∏è prepareCVForOptimization: No CV data');
      return 'Brak danych CV';
    }
    
    // If we have HTML content, send it directly
    if (data.fullContent && data.fullContent.includes('<')) {
      console.log('üìÑ Sending HTML CV structure to AI');
      return data.fullContent;
    }
    
    // Build CV text from structured data
    let cvText = '';
    
    // Personal Information
    const name = data.name || data.personalInfo?.name || 'U≈ºytkownik';
    const email = data.email || data.personalInfo?.email || '';
    const phone = data.phone || data.personalInfo?.phone || '';
    
    cvText += `${name}\n`;
    if (email) cvText += `Email: ${email}\n`;
    if (phone) cvText += `Telefon: ${phone}\n`;
    cvText += '\n';
    
    // Summary
    if (data.summary && data.summary.trim()) {
      cvText += `PODSUMOWANIE:\n${data.summary}\n\n`;
    }
    
    // Experience
    if (data.experience && data.experience.length > 0) {
      cvText += 'DO≈öWIADCZENIE ZAWODOWE:\n';
      data.experience.forEach((exp) => {
        cvText += `‚Ä¢ ${exp}\n`;
      });
      cvText += '\n';
    }
    
    // Education
    if (data.education && data.education.length > 0) {
      cvText += 'WYKSZTA≈ÅCENIE:\n';
      data.education.forEach((edu) => {
        cvText += `‚Ä¢ ${edu}\n`;
      });
      cvText += '\n';
    }
    
    // Skills
    if (data.skills && data.skills.length > 0) {
      cvText += 'UMIEJƒòTNO≈öCI:\n';
      cvText += data.skills.join(', ') + '\n\n';
    }
    
    const finalCV = cvText.trim();
    console.log('üìã Prepared CV for optimization:', finalCV.substring(0, 300) + '...');
    console.log('üìè CV length:', finalCV.length, 'characters');
    
    return finalCV;
  };

  // ============================================
  // SECTION 12: AI OPTIMIZATION FUNCTIONS
  // ============================================
  
  /**
   * Main AI optimization function for CV content
   * @param {string} cvText - Raw CV text
   * @param {string} jobDescription - Job posting description
   * @param {string} photo - Base64 encoded photo
   * @param {string} plan - User subscription plan
   */
  const optimizeFullCVWithAI = async (cvText, jobDescription, photo, plan) => {
    console.log('ü§ñ Starting AI optimization...');
    updateAppState({ isOptimizing: true }, 'optimize-start');
    
    try {
      // Parse CV text for structure
      const parsedCV = parseCvFromText(cvText);
      
      // Determine API endpoint based on plan
      const endpoint = (plan === 'premium' || plan === 'gold') ? '/api/analyze' : '/api/demo-optimize';
      
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          currentCV: cvText,
          jobPosting: jobDescription || '',
          email: appState.cvData?.email || 'user@example.com',
          sessionId: appState.sessionId || 'unknown',
          plan: plan || 'basic',
          paid: plan === 'premium' || plan === 'gold',
          photo: photo,
          preservePhotos: true
        })
      });
      
      if (!response.ok) {
        throw new Error(`Optimization failed: ${response.status}`);
      }
      
      const data = await response.json();
      
      // Update CV with optimized content
      const optimizedCV = {
        ...parsedCV,
        fullContent: data.optimizedCV || data.analysis || data.result || cvText,
        optimized: data.optimizedCV || data.analysis || data.result,
        photo: photo,
        jobPosting: jobDescription,
        plan: plan
      };
      
      setCvData(optimizedCV);
      
      addNotification({
        type: 'success',
        title: 'üéâ CV zoptymalizowane!',
        message: 'Twoje CV zosta≈Ço profesjonalnie ulepszone przez AI'
      });
      
      // Update ATS scores
      updateAppState({ 
        isOptimizing: false,
        atsScore: 95,
        optimizedScore: 95
      }, 'optimize-complete');
      
    } catch (error) {
      console.error('‚ùå Optimization error:', error);
      handleError(error, 'AI optimization');
      updateAppState({ isOptimizing: false }, 'optimize-error');
    }
  };

  /**
   * Button click handler for AI optimization
   */
  const optimizeWithAI = async () => {
    if (!appState.cvData?.fullContent) {
      addNotification({
        type: 'error',
        title: 'Brak CV',
        message: 'Najpierw za≈Çaduj swoje CV'
      });
      return;
    }
    
    await optimizeFullCVWithAI(
      appState.cvData.fullContent,
      appState.cvData.jobPosting || '',
      appState.cvData.photo || null,
      appState.userPlan || 'basic'
    );
  };

  // Continue to Part 3...

// success.js - Part 3
// Continuation: Session fetching, data recovery, and initialization

  // ============================================
  // SECTION 13: SESSION DATA FETCHING
  // ============================================
  
  /**
   * Fetches user data from session with retry logic
   * @param {string} sessionId - Session identifier
   * @returns {Object|null} Session data or null if failed
   */
  const fetchUserDataFromSession = async (sessionId) => {
    const MAX_RETRIES = 3;
    const MAX_EXECUTION_TIME = 30000; // 30 seconds
    const REQUEST_TIMEOUT = 15000; // 15 seconds per request
    
    const executionState = {
      sessionId,
      startTime: Date.now(),
      attempts: 0,
      lastError: null,
      results: {
        fullSessionData: null,
        stripeSessionData: null,
        actualSessionId: sessionId
      }
    };
    
    console.log(`üéØ Fetching session data for: ${sessionId}`);
    
    // Retry loop
    while (executionState.attempts < MAX_RETRIES) {
      // Check timeout
      if (Date.now() - executionState.startTime > MAX_EXECUTION_TIME) {
        console.error('üö® Session fetch timeout exceeded');
        throw new Error(`Session fetch timeout after ${MAX_EXECUTION_TIME}ms`);
      }
      
      executionState.attempts++;
      
      try {
        console.log(`üîç Attempt ${executionState.attempts}/${MAX_RETRIES}`);
        
        // Create timeout promise
        const timeout = new Promise((_, reject) => 
          setTimeout(() => reject(new Error('Request timeout')), REQUEST_TIMEOUT)
        );
        
        // Detect session type
        const isFallbackSession = executionState.sessionId.startsWith('fallback_');
        const isDemoSession = executionState.sessionId.startsWith('demo_session_');
        const isTestSession = executionState.sessionId.startsWith('test_');
        
        let stripeResponse, directSessionResponse;
        
        if (isFallbackSession || isDemoSession || isTestSession) {
          // Skip Stripe for special sessions
          console.log('üö´ Skipping Stripe API for special session');
          const [directResponse] = await Promise.race([
            Promise.allSettled([
              fetch(`/api/get-session-data?session_id=${executionState.sessionId}`)
            ]),
            timeout
          ]);
          
          stripeResponse = { status: 'rejected', reason: new Error('Skipped') };
          directSessionResponse = directResponse;
        } else {
          // Regular session - try both endpoints
          const urlParams = new URLSearchParams(window.location.search);
          const backupSessionId = urlParams.get('backup_session');
          let apiUrl = `/api/get-session-data?session_id=${executionState.sessionId}`;
          
          if (executionState.sessionId.startsWith('cs_') && backupSessionId) {
            apiUrl += `&backup_session=${encodeURIComponent(backupSessionId)}`;
            console.log('üöë Adding backup_session parameter:', backupSessionId);
          }
          
          const [response1, response2] = await Promise.race([
            Promise.allSettled([
              fetch(`/api/get-session?session_id=${executionState.sessionId}`),
              fetch(apiUrl)
            ]),
            timeout
          ]);
          
          stripeResponse = response1;
          directSessionResponse = response2;
        }
        
        // Process Stripe response
        if (stripeResponse.status === 'fulfilled' && stripeResponse.value.ok) {
          executionState.results.stripeSessionData = await stripeResponse.value.json();
          
          if (executionState.results.stripeSessionData.success && 
              executionState.results.stripeSessionData.session?.metadata?.fullSessionId) {
            executionState.results.actualSessionId = 
              executionState.results.stripeSessionData.session.metadata.fullSessionId;
            console.log('üéØ Found fullSessionId:', executionState.results.actualSessionId);
          }
        }
        
        // Process direct session response
        if (directSessionResponse.status === 'fulfilled') {
          const response = directSessionResponse.value;
          
          if (response.ok) {
            const cvPerfectData = await response.json();
            if (cvPerfectData.success && cvPerfectData.cvData) {
              executionState.results.fullSessionData = cvPerfectData;
              console.log('üéØ Got CV data:', cvPerfectData.cvData.length, 'chars');
            }
          } else if (response.status === 404) {
            console.log(`‚ö†Ô∏è Session ${executionState.sessionId} not found (404)`);
            executionState.nonRetryableError = true;
            break;
          }
        }
        
        // Process results if we have data
        if (executionState.results.fullSessionData?.success && 
            executionState.results.fullSessionData.cvData) {
          const sessionData = executionState.results.fullSessionData;
          const plan = sessionData.plan || 'premium';
          
          setUserPlan(plan);
          
          // Parse and display CV immediately
          const parsedCV = parseCvFromText(sessionData.cvData);
          const initialCvData = {
            ...parsedCV,
            fullContent: sessionData.cvData,
            email: sessionData.email || parsedCV.email,
            photo: sessionData.photo,
            jobPosting: sessionData.jobPosting || '',
            plan: plan,
            isOriginal: true
          };
          
          setCvData(initialCvData);
          updateAppState({ isInitializing: false }, 'session-loaded');
          
          // Start optimization in background
          console.log('‚úÖ CV displayed, starting optimization...');
          await optimizeFullCVWithAI(
            sessionData.cvData, 
            sessionData.jobPosting || '', 
            sessionData.photo, 
            plan
          );
          
          return { success: true, source: 'full_session' };
        }
        
        // If no data yet, continue retry loop
        if (executionState.attempts < MAX_RETRIES) {
          console.log(`‚è≥ Waiting before retry ${executionState.attempts + 1}...`);
          await new Promise(resolve => setTimeout(resolve, 1000 * executionState.attempts));
          continue;
        }
        
      } catch (attemptError) {
        console.error(`‚ùå Attempt ${executionState.attempts} error:`, attemptError);
        executionState.lastError = attemptError;
        
        if (attemptError.message.includes('timeout')) {
          console.log('üö´ Network timeout - stopping retries');
          break;
        }
        
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }
    
    // Final fallback: try sessionStorage
    console.log('üîÑ Trying sessionStorage fallback...');
    try {
      const pendingCV = sessionStorage.getItem('pendingCV');
      const pendingJob = sessionStorage.getItem('pendingJob') || '';
      const pendingPhoto = sessionStorage.getItem('pendingPhoto') || null;
      
      if (pendingCV && pendingCV.length > 100) {
        console.log('‚úÖ SessionStorage fallback success!');
        await optimizeFullCVWithAI(pendingCV, pendingJob, pendingPhoto, executionState.sessionId);
        
        // Clear sessionStorage after use
        sessionStorage.removeItem('pendingCV');
        sessionStorage.removeItem('pendingJob');
        sessionStorage.removeItem('pendingPhoto');
        
        return { success: true, source: 'sessionStorage_fallback' };
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è SessionStorage fallback failed:', error);
    }
    
    // All attempts failed
    console.error('‚ùå All session fetch attempts failed');
    updateAppState({ isInitializing: false }, 'session-failed');
    
    return { 
      success: false, 
      source: 'all_attempts_failed', 
      attempts: executionState.attempts 
    };
  };

  // ============================================
  // SECTION 14: DATA RECOVERY FUNCTIONS
  // ============================================
  
  /**
   * Attempts to recover session data from browser storage
   * @param {string} fallbackSessionId - Fallback session ID
   * @returns {Object} Recovery result
   */
  const trySessionStorageFallback = async (fallbackSessionId) => {
    console.log('üöë Starting fallback recovery with ID:', fallbackSessionId);
    
    // Provide demo data for fallback sessions
    if (fallbackSessionId.startsWith('fallback_')) {
      console.log('üéØ Providing demo data for fallback session');
      const demoData = generateFallbackDemoData(fallbackSessionId);
      
      setCvData(demoData.cvData);
      setUserPlan(demoData.plan);
      updateAppState({
        isInitializing: false,
        hasNoSession: false
      }, 'fallback-demo-data');
      
      addNotification('Demo mode aktywny', 'info');
      return { success: true, source: 'demo-data', data: demoData };
    }
    
    try {
      // Try sessionStorage first
      const pendingCV = sessionStorage.getItem('pendingCV');
      const pendingJob = sessionStorage.getItem('pendingJob') || '';
      const pendingEmail = sessionStorage.getItem('pendingEmail') || '';
      const pendingPhoto = sessionStorage.getItem('pendingPhoto') || null;
      const pendingPlan = sessionStorage.getItem('pendingPlan') || 'premium';
      
      if (pendingCV && pendingCV.length > 100) {
        console.log('‚úÖ SessionStorage recovery successful');
        
        // Display recovered data
        await displayRecoveredData({
          cv: pendingCV,
          job: pendingJob,
          email: pendingEmail,
          photo: pendingPhoto,
          plan: pendingPlan,
          source: 'sessionStorage'
        });
        
        return { success: true, source: 'sessionStorage' };
      }
      
      // Try localStorage as second option
      const lastSuccessSessionId = localStorage.getItem('lastSuccessSessionId');
      if (lastSuccessSessionId) {
        const storedData = localStorage.getItem(`cvperfect_cv_${lastSuccessSessionId}`);
        if (storedData) {
          try {
            const parsedData = JSON.parse(storedData);
            if (parsedData.cvContent && parsedData.cvContent.length > 100) {
              console.log('‚úÖ LocalStorage recovery successful');
              
              await displayRecoveredData({
                cv: parsedData.cvContent,
                job: parsedData.jobPosting || '',
                email: parsedData.email || '',
                photo: parsedData.photo || null,
                plan: parsedData.plan || 'premium',
                source: 'localStorage'
              });
              
              return { success: true, source: 'localStorage' };
            }
          } catch (parseError) {
            console.warn('‚ö†Ô∏è Failed to parse localStorage data:', parseError);
          }
        }
      }
      
      return { success: false, source: 'no_stored_data' };
      
    } catch (error) {
      console.error('‚ùå Storage recovery error:', error);
      return { success: false, source: 'recovery_error', error: error.message };
    } finally {
      updateAppState({ isInitializing: false }, 'fallback-complete');
    }
  };

  /**
   * Displays recovered CV data
   * @param {Object} data - Recovered data object
   */
  const displayRecoveredData = async (data) => {
    const { cv, job, email, photo, plan, source } = data;
    
    // Parse and prepare CV data
    const parsedCV = parseCvFromText(cv);
    const initialCvData = {
      ...parsedCV,
      fullContent: cv,
      photo: photo,
      jobPosting: job,
      plan: plan,
      isOriginal: true,
      source: `${source}_recovery`,
      email: email
    };
    
    // Update plan and display CV
    if (plan) {
      updateAppState({ userPlan: plan }, `set-plan-from-${source}`);
    }
    
    setCvData(initialCvData);
    
    addNotification({
      type: 'success',
      title: 'CV odzyskane',
      message: `Pomy≈õlnie odzyskano dane CV z ${source === 'localStorage' ? 'pamiƒôci trwa≈Çej' : 'pamiƒôci sesji'}`
    });
    
    // Start optimization in background
    console.log('ü§ñ Starting background AI optimization...');
    await optimizeFullCVWithAI(cv, job, photo, plan);
    
    // Clean up sessionStorage after use
    if (source === 'sessionStorage') {
      sessionStorage.removeItem('pendingCV');
      sessionStorage.removeItem('pendingJob');
      sessionStorage.removeItem('pendingEmail');
      sessionStorage.removeItem('pendingPhoto');
      sessionStorage.removeItem('pendingPlan');
      console.log('‚úÖ SessionStorage cleaned up');
    }
  };

  // Continue to Part 4...

// success.js - Part 4
// Continuation: Component initialization, export functions, and cleanup

  // ============================================
  // SECTION 15: COMPONENT INITIALIZATION
  // ============================================
  
  /**
   * Main initialization effect - runs once on component mount
   */
  useEffect(() => {
    if (typeof window === 'undefined') return;
    
    // Prevent double execution in React Strict Mode
    if (initializationRef.current) {
      console.log('üö´ Initialization already running, skipping duplicate');
      return;
    }
    initializationRef.current = true;
    
    const initialize = async () => {
      try {
        const urlParams = new URLSearchParams(window.location.search);
        const urlSessionId = urlParams.get('session_id');
        const backupSessionId = urlParams.get('backup_session');
        const cookieSessionId = getCookie('cvperfect_session');
        const templateParam = urlParams.get('template');
        const planParam = urlParams.get('plan');
        const demoParam = urlParams.get('demo');
        
        // Check for demo mode first
        const isDemoMode = demoParam === 'true';
        
        if (isDemoMode) {
          console.log('üé≠ DEMO MODE ACTIVATED');
          
          const demoData = generateFallbackDemoData('demo_session_12345');
          
          // Set demo state
          updateAppState({
            userPlan: planParam || 'premium',
            selectedTemplate: templateParam || 'luxury',
            isDemoMode: true,
            isInitializing: false
          }, 'demo-mode-init');
          
          setCvData(demoData.cvData);
          
          addNotification({
            type: 'info',
            title: 'üé≠ Tryb Demo',
            message: 'Wszystkie funkcje dostƒôpne do testowania!'
          });
          
          return;
        }
        
        // Determine session ID priority
        let sessionId = urlSessionId || backupSessionId || cookieSessionId;
        
        // Log session source for debugging
        const sessionSource = urlSessionId ? 'url' : 
                            (backupSessionId ? 'backup' : 
                            (cookieSessionId ? 'cookie' : 'none'));
        console.log(`üìä Session source: ${sessionSource}, ID: ${sessionId}`);
        
        // Update state from URL parameters
        const urlState = {};
        if (planParam) urlState.userPlan = planParam;
        if (templateParam) urlState.selectedTemplate = templateParam;
        
        if (Object.keys(urlState).length > 0) {
          updateAppState(urlState, 'url-params');
        }
        
        // Load session if available
        if (sessionId) {
          console.log('üîó Loading session:', sessionId);
          updateAppState({ 
            isInitializing: true,
            sessionId: sessionId 
          }, 'init-start');
          
          addNotification({
            type: 'info',
            title: '≈Åadowanie CV',
            message: 'Pobieranie danych sesji...'
          });
          
          await fetchUserDataFromSession(sessionId);
        } else {
          // No session found - try fallback mechanisms
          console.log('‚ö†Ô∏è No session ID found, trying fallbacks...');
          
          // Check sessionStorage first
          let fallbackSessionId = sessionStorage.getItem('currentSessionId');
          
          if (fallbackSessionId) {
            console.log('üíæ Found session in sessionStorage:', fallbackSessionId);
            await fetchUserDataFromSession(fallbackSessionId);
            return;
          }
          
          // Check localStorage
          const lastSuccessSessionId = localStorage.getItem('lastSuccessSessionId');
          
          if (lastSuccessSessionId) {
            console.log('üîó Using lastSuccessSessionId:', lastSuccessSessionId);
            await fetchUserDataFromSession(lastSuccessSessionId);
            return;
          }
          
          // No session found - activate demo mode
          console.log('üé≠ No session found, activating demo mode');
          
          const demoData = generateFallbackDemoData('auto_demo_' + Date.now());
          
          updateAppState({ 
            isDemoMode: true,
            userPlan: 'premium',
            selectedTemplate: 'simple',
            isInitializing: false
          }, 'auto-demo-fallback');
          
          setCvData(demoData.cvData);
          
          addNotification({
            type: 'info',
            title: 'üé≠ Tryb Demo Aktywowany',
            message: 'Brak sesji - uruchomiono tryb demonstracyjny'
          });
        }
      } catch (error) {
        console.error('‚ùå Initialization error:', error);
        addNotification('‚ùå B≈ÇƒÖd podczas inicjalizacji', 'error');
        updateAppState({ isInitializing: false }, 'init-error');
      }
    };
    
    initialize();
    
    // Cleanup
    return () => {
      initializationRef.current = false;
    };
  }, []); // Run once on mount

  // ============================================
  // SECTION 16: EXPORT FUNCTIONS
  // ============================================
  
  /**
   * Exports CV as PDF document
   */
  const exportToPDF = useCallback(async () => {
    if (!cvPreviewRef.current) {
      addNotification('‚ùå Brak danych CV do eksportu', 'error');
      return;
    }
    
    if (loadingState.isExporting) {
      addNotification('‚è≥ Eksport ju≈º w toku...', 'info');
      return;
    }
    
    updateAppState({ isExporting: true }, 'export-pdf-start');
    addNotification('üìÑ Generowanie PDF...', 'info');
    
    try {
      // Create canvas from CV preview
      const canvas = await html2canvas(cvPreviewRef.current, {
        scale: 3,
        useCORS: true,
        allowTaint: true,
        backgroundColor: '#ffffff',
        imageTimeout: 15000,
        scrollX: 0,
        scrollY: 0,
        windowWidth: cvPreviewRef.current.scrollWidth,
        windowHeight: cvPreviewRef.current.scrollHeight
      });
      
      const imgData = canvas.toDataURL('image/png', 1.0);
      const pdf = new jsPDF('p', 'mm', 'a4');
      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = (canvas.height * pdfWidth) / canvas.width;
      
      // Handle multi-page PDFs
      if (pdfHeight > pdf.internal.pageSize.getHeight()) {
        const pageHeight = pdf.internal.pageSize.getHeight();
        let yPosition = 0;
        
        while (yPosition < pdfHeight) {
          if (yPosition > 0) pdf.addPage();
          
          pdf.addImage(
            imgData, 
            'PNG', 
            0, 
            -yPosition, 
            pdfWidth, 
            pdfHeight
          );
          
          yPosition += pageHeight;
        }
      } else {
        pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);
      }
      
      // Generate filename
      const fileName = `CV_${coreData.cvData?.name?.replace(/\s+/g, '_') || 'optimized'}.pdf`;
      pdf.save(fileName);
      
      addNotification('‚úÖ PDF zosta≈Ç pobrany!', 'success');
      console.log('üìÑ PDF exported:', fileName);
    } catch (error) {
      console.error('PDF export error:', error);
      
      if (error.message.includes('canvas')) {
        addNotification('üñºÔ∏è B≈ÇƒÖd renderowania. Spr√≥buj ponownie.', 'error');
      } else {
        addNotification('‚ùå B≈ÇƒÖd eksportu PDF', 'error');
      }
    } finally {
      updateAppState({ isExporting: false }, 'export-pdf-end');
    }
  }, [coreData.cvData, loadingState.isExporting, addNotification, updateAppState]);

  /**
   * Exports CV as DOCX document
   */
  const exportToDOCX = useCallback(async () => {
    if (appState.userPlan === 'basic') {
      addNotification('üîí Eksport DOCX dostƒôpny w planie Gold/Premium', 'warning');
      return;
    }
    
    if (!coreData.cvData) {
      addNotification('‚ùå Brak danych CV do eksportu', 'error');
      return;
    }
    
    if (loadingState.isExporting) {
      addNotification('‚è≥ Eksport ju≈º w toku...', 'info');
      return;
    }

    updateAppState({ isExporting: true }, 'export-docx-start');
    addNotification('üìÑ Generowanie DOCX...', 'info');
    
    try {
      const cvData = coreData.cvData;
      const children = [];
      
      // Header with name
      children.push(
        new Paragraph({
          text: cvData?.name || 'CV',
          heading: HeadingLevel.TITLE,
        })
      );
      
      // Contact information
      if (cvData?.email) {
        children.push(
          new Paragraph({
            children: [new TextRun({ text: `Email: ${cvData.email}` })],
          })
        );
      }
      
      if (cvData?.phone) {
        children.push(
          new Paragraph({
            children: [new TextRun({ text: `Telefon: ${cvData.phone}` })],
          })
        );
      }
      
      // Add spacing
      children.push(new Paragraph({ text: '' }));
      
      // Summary
      if (cvData?.summary) {
        children.push(
          new Paragraph({
            text: 'Podsumowanie',
            heading: HeadingLevel.HEADING_1,
          }),
          new Paragraph({
            children: [new TextRun({ text: cvData.summary })],
          }),
          new Paragraph({ text: '' })
        );
      }
      
      // Experience
      if (cvData?.experience && cvData.experience.length > 0) {
        children.push(
          new Paragraph({
            text: 'Do≈õwiadczenie zawodowe',
            heading: HeadingLevel.HEADING_1,
          })
        );
        
        cvData.experience.forEach(exp => {
          children.push(
            new Paragraph({
              children: [new TextRun({ text: `‚Ä¢ ${exp}` })],
            })
          );
        });
        
        children.push(new Paragraph({ text: '' }));
      }
      
      // Education
      if (cvData?.education && cvData.education.length > 0) {
        children.push(
          new Paragraph({
            text: 'Wykszta≈Çcenie',
            heading: HeadingLevel.HEADING_1,
          })
        );
        
        cvData.education.forEach(edu => {
          children.push(
            new Paragraph({
              children: [new TextRun({ text: `‚Ä¢ ${edu}` })],
            })
          );
        });
        
        children.push(new Paragraph({ text: '' }));
      }
      
      // Skills
      if (cvData?.skills && cvData.skills.length > 0) {
        children.push(
          new Paragraph({
            text: 'Umiejƒôtno≈õci',
            heading: HeadingLevel.HEADING_1,
          }),
          new Paragraph({
            children: [new TextRun({ text: cvData.skills.join(', ') })],
          })
        );
      }
      
      // Create document
      const doc = new Document({
        sections: [{
          children: children
        }],
      });

      const buffer = await Packer.toBuffer(doc);
      const fileName = `CV_${cvData?.name?.replace(/\s+/g, '_') || 'optimized'}.docx`;
      saveAs(new Blob([buffer]), fileName);
      
      addNotification('‚úÖ DOCX zosta≈Ç pobrany!', 'success');
      console.log('üìÑ DOCX exported:', fileName);
    } catch (error) {
      console.error('DOCX export error:', error);
      addNotification('‚ùå B≈ÇƒÖd podczas eksportu DOCX', 'error');
    } finally {
      updateAppState({ isExporting: false }, 'export-docx-end');
    }
  }, [coreData.cvData, appState.userPlan, loadingState.isExporting, addNotification, updateAppState]);

  /**
   * Sends CV via email
   */
  const sendEmail = useCallback(async (emailData) => {
    if (appState.userPlan === 'basic') {
      addNotification('Wysy≈Çanie mailem dostƒôpne w planie Gold/Premium', 'warning');
      return;
    }

    try {
      await fetch('/api/send-email', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          to: emailData.to,
          subject: emailData.subject,
          cvData: coreData.cvData,
          template: appState.selectedTemplate
        })
      });
      
      addNotification('Email zosta≈Ç wys≈Çany!', 'success');
      toggleModal('email', false);
    } catch (error) {
      console.error('Email error:', error);
      addNotification('B≈ÇƒÖd podczas wysy≈Çania maila', 'error');
    }
  }, [coreData.cvData, appState.userPlan, appState.selectedTemplate, addNotification, toggleModal]);

  // ============================================
  // SECTION 17: CLEANUP EFFECTS
  // ============================================
  
  /**
   * Cleanup effect for timeouts and notifications
   */
  useEffect(() => {
    return () => {
      // Clear all notification timeouts
      notifications.forEach(notification => {
        if (notification.timeoutId) {
          clearTimeout(notification.timeoutId);
        }
      });
      
      // Clear all tracked timeouts
      timeoutRefs.current.forEach(timeoutId => {
        clearTimeout(timeoutId);
      });
      timeoutRefs.current = [];
    };
  }, [notifications]);

  // Continue to Part 5...

// success.js - Part 5
// Continuation: CV Templates, Memoization, and Translation System

  // ============================================
  // SECTION 18: TRANSLATIONS
  // ============================================
  
  const translations = {
    pl: {
      title: 'Tw√≥j CV zosta≈Ço zoptymalizowane!',
      subtitle: 'Profesjonalne CV gotowe do pobrania',
      atsScore: 'Wynik ATS',
      downloadPdf: 'Pobierz PDF',
      downloadDocx: 'Pobierz DOCX',
      sendEmail: 'Wy≈õlij mailem',
      selectTemplate: 'Wybierz szablon',
      optimizeWithAI: 'Optymalizuj z AI',
      upgradeRequired: 'Wymagane ulepszenie',
      templates: {
        simple: 'Prosty',
        modern: 'Nowoczesny',
        executive: 'Kierowniczy',
        creative: 'Kreatywny',
        tech: 'Techniczny',
        luxury: 'Luksusowy',
        minimal: 'Minimalny'
      }
    },
    en: {
      title: 'Your CV has been optimized!',
      subtitle: 'Professional CV ready for download',
      atsScore: 'ATS Score',
      downloadPdf: 'Download PDF',
      downloadDocx: 'Download DOCX',
      sendEmail: 'Send via Email',
      selectTemplate: 'Select Template',
      optimizeWithAI: 'Optimize with AI',
      upgradeRequired: 'Upgrade Required',
      templates: {
        simple: 'Simple',
        modern: 'Modern',
        executive: 'Executive',
        creative: 'Creative',
        tech: 'Tech',
        luxury: 'Luxury',
        minimal: 'Minimal'
      }
    }
  };

  const [language, setLanguage] = useState('pl');
  const t = translations[language];

  // ============================================
  // SECTION 19: PLAN TEMPLATES ACCESS
  // ============================================
  
  const planTemplates = {
    basic: ['simple'],
    gold: ['simple', 'modern', 'executive', 'creative'],
    premium: ['simple', 'modern', 'executive', 'creative', 'tech', 'luxury', 'minimal']
  };

  // ============================================
  // SECTION 20: CV TEMPLATES
  // ============================================
  
  const templates = {
    /**
     * Simple template - Basic professional layout
     */
    simple: (data) => {
      if (!data || Object.keys(data).length === 0) {
        return (
          <div className="bg-white border border-gray-200 p-8 max-w-2xl mx-auto shadow-lg rounded-lg">
            <div className="flex items-center justify-center space-x-4">
              <div className="animate-spin w-8 h-8 border-3 border-blue-600 border-t-transparent rounded-full"></div>
              <span className="text-gray-800">≈Åadowanie danych CV...</span>
            </div>
          </div>
        );
      }
      
      const hasOptimizedContent = data?.fullContent || data?.optimizedContent;
      const optimizedHTML = hasOptimizedContent ? parseMarkdownToHTML(data.fullContent || data.optimizedContent) : null;
      
      if (hasOptimizedContent && optimizedHTML) {
        return (
          <div className="bg-white border border-gray-200 p-8 max-w-2xl mx-auto shadow-lg rounded-lg">
            {data?.photo && (
              <div className="flex justify-center mb-8">
                <img 
                  src={data.photo} 
                  alt="Profile photo" 
                  className="w-24 h-24 rounded-full object-cover border-3 border-blue-600 shadow-lg"
                />
              </div>
            )}
            <div 
              className="simple-optimized-content prose prose-gray max-w-none text-gray-800"
              dangerouslySetInnerHTML={{ __html: sanitizeHTML(optimizedHTML) }}
            />
          </div>
        );
      }
      
      return (
        <div className="bg-white border border-gray-200 p-10 max-w-2xl mx-auto shadow-lg rounded-lg">
          <div className="border-b-2 border-blue-600 pb-6 mb-8">
            <div className="flex items-start gap-6">
              {data?.photo && (
                <div className="flex-shrink-0">
                  <img 
                    src={data.photo} 
                    alt="Profile photo" 
                    className="w-24 h-24 rounded-full object-cover border-3 border-blue-600 shadow-lg"
                  />
                </div>
              )}
              <div className="flex-1">
                <h1 className="text-3xl font-bold text-gray-900 mb-2">{data?.name}</h1>
                <div className="flex flex-wrap gap-4 text-gray-700 font-medium">
                  <span>{data?.email}</span>
                  <span>{data?.phone}</span>
                </div>
              </div>
            </div>
          </div>

          {data?.summary && (
            <div className="mb-8">
              <h2 className="text-xl font-bold text-blue-600 uppercase mb-4">Podsumowanie</h2>
              <p className="text-gray-800 leading-relaxed">{data.summary}</p>
            </div>
          )}
          
          <div className="mb-8">
            <h2 className="text-xl font-bold text-blue-600 uppercase mb-4">Do≈õwiadczenie</h2>
            <div className="space-y-4">
              {data?.experience?.map((exp, i) => (
                <div key={i} className="pl-4 border-l-2 border-blue-200">
                  <div className="text-gray-800">{exp}</div>
                </div>
              ))}
            </div>
          </div>

          {data?.education && data.education.length > 0 && (
            <div className="mb-8">
              <h2 className="text-xl font-bold text-blue-600 uppercase mb-4">Wykszta≈Çcenie</h2>
              <div className="space-y-3">
                {data.education.map((edu, i) => (
                  <div key={i} className="pl-4 border-l-2 border-blue-200">
                    <div className="text-gray-800">{edu}</div>
                  </div>
                ))}
              </div>
            </div>
          )}

          <div className="mb-6">
            <h2 className="text-xl font-bold text-blue-600 uppercase mb-4">Umiejƒôtno≈õci</h2>
            <div className="flex flex-wrap gap-3">
              {data?.skills?.map((skill, i) => (
                <span key={i} className="bg-blue-50 text-blue-800 border border-blue-200 px-4 py-2 rounded-lg font-medium text-sm">
                  {skill}
                </span>
              ))}
            </div>
          </div>

          <div className="mt-8 pt-4 border-t border-gray-200">
            <p className="text-xs text-gray-600">
              Wyra≈ºam zgodƒô na przetwarzanie moich danych osobowych zgodnie z RODO.
            </p>
          </div>
        </div>
      );
    },

    /**
     * Modern template - Contemporary design with gradients
     */
    modern: (data) => {
      if (!data) return null;
      
      return (
        <div className="bg-gradient-to-br from-slate-50 to-blue-50 p-10 max-w-2xl mx-auto shadow-xl rounded-xl border border-slate-200">
          <div className="bg-gradient-to-r from-blue-600 to-indigo-600 text-white p-6 rounded-lg mb-8 shadow-lg">
            <h1 className="text-3xl font-bold">{data?.name}</h1>
            <div className="flex gap-6 mt-3 text-sm">
              <span>{data?.email}</span>
              <span>{data?.phone}</span>
            </div>
          </div>
          
          {data?.photo && (
            <div className="flex justify-center mb-8">
              <img 
                src={data.photo} 
                alt="Professional photo" 
                className="w-24 h-24 rounded-full object-cover border-4 border-blue-500 shadow-lg"
              />
            </div>
          )}
          
          {/* Rest of the modern template content */}
          {/* Similar structure to simple template but with modern styling */}
        </div>
      );
    },

    /**
     * Executive template - Professional executive design
     */
    executive: (data) => {
      if (!data) return null;
      
      return (
        <div className="bg-white p-12 max-w-2xl mx-auto shadow-2xl border-t-4 border-gray-800 rounded-lg">
          <div className="text-center mb-10 pb-8 border-b-2 border-gray-800">
            {data?.photo && (
              <div className="flex justify-center mb-6">
                <img 
                  src={data.photo} 
                  alt="Executive photo" 
                  className="w-32 h-32 rounded-full object-cover border-4 border-gray-800 shadow-xl"
                />
              </div>
            )}
            <h1 className="text-4xl font-serif text-gray-900 mb-3">{data?.name}</h1>
            <div className="text-gray-700 font-semibold text-xl">Chief Executive Officer</div>
            <div className="flex justify-center gap-8 mt-4 text-gray-600">
              <span>{data?.email}</span>
              <span>{data?.phone}</span>
            </div>
          </div>
          {/* Executive content continues... */}
        </div>
      );
    },

    // Additional templates (creative, tech, luxury, minimal) follow the same pattern
    creative: (data) => null,
    tech: (data) => null,
    luxury: (data) => null,
    minimal: (data) => null
  };

  // ============================================
  // SECTION 21: MEMOIZED COMPONENTS
  // ============================================
  
  /**
   * Memoized CV data to prevent unnecessary re-renders
   */
  const memoizedCVData = useMemo(() => {
    if (!coreData.cvData) return null;
    
    return {
      ...coreData.cvData,
      hasContent: !!(coreData.cvData.fullContent && coreData.cvData.fullContent.length > 100)
    };
  }, [coreData.cvData]);

  /**
   * Memoized template renderer
   */
  const TemplateRenderer = useMemo(() => {
    // Show error state if no session
    if (loadingState.hasNoSession) {
      return (
        <div className="bg-gradient-to-br from-red-900/90 via-red-800/90 to-red-900/90 backdrop-blur-xl border border-red-400/30 p-8 max-w-2xl mx-auto shadow-2xl rounded-2xl">
          <div className="text-center">
            <div className="text-6xl mb-4">‚ö†Ô∏è</div>
            <div className="text-2xl font-bold text-white mb-4">Brak danych sesji</div>
            <div className="text-red-200 mb-6">
              Nie znaleziono sesji CV. Mo≈ºesz przetestowaƒá funkcje w trybie demo.
            </div>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <button
                onClick={() => window.location.href = '/success?demo=true'}
                className="bg-gradient-to-r from-yellow-500 to-orange-500 text-black px-6 py-3 rounded-full font-semibold"
              >
                üé≠ Tryb Demo
              </button>
              <button
                onClick={() => setUiState(prev => ({ ...prev, modals: { ...prev.modals, recovery: true } }))}
                className="bg-gradient-to-r from-green-600 to-emerald-600 text-white px-6 py-3 rounded-full font-semibold"
              >
                üìß Odzyskaj przez email
              </button>
              <button
                onClick={() => window.location.href = '/'}
                className="bg-gradient-to-r from-blue-600 to-purple-600 text-white px-6 py-3 rounded-full font-semibold"
              >
                Strona g≈Ç√≥wna
              </button>
            </div>
          </div>
        </div>
      );
    }

    // Show loading state
    if (loadingState.isInitializing) {
      return (
        <div className="bg-gray-900 border border-purple-400/30 p-8 max-w-2xl mx-auto shadow-2xl rounded-2xl">
          <div className="flex items-center justify-center space-x-4">
            <div className="animate-spin w-8 h-8 border-3 border-purple-500 border-t-transparent rounded-full"></div>
            <span className="text-white">Inicjalizowanie...</span>
          </div>
        </div>
      );
    }

    // Render selected template
    const selectedTemplate = uiState.selectedTemplate || 'simple';
    const templateFunction = templates[selectedTemplate] || templates.simple;
    return templateFunction(coreData.cvData);
  }, [loadingState.hasNoSession, loadingState.isInitializing, uiState.selectedTemplate, coreData.cvData]);

  // Continue to Part 6...

// success.js - Part 6
// Continuation: UI Components, Modals, and Main Return Statement

  // ============================================
  // SECTION 22: MAIN COMPONENT RETURN
  // ============================================
  
  return (
    <>
      <Head>
        <title>Sukces - CV Zoptymalizowane | CvPerfect.pl</title>
        <meta name="description" content="Twoje CV zosta≈Ço profesjonalnie zoptymalizowane przez AI. Pobierz gotowy dokument." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      
      <div className="min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900">
        {/* Notification System */}
        <AnimatePresence>
          {notifications.map(notification => (
            <motion.div
              key={notification.id}
              initial={{ opacity: 0, y: -50, x: 50 }}
              animate={{ opacity: 1, y: 0, x: 0 }}
              exit={{ opacity: 0, x: 100 }}
              className={`fixed top-4 right-4 z-50 p-4 rounded-xl shadow-2xl max-w-sm border backdrop-blur-lg ${
                notification.type === 'success' 
                  ? 'bg-gradient-to-r from-emerald-500/90 to-green-500/90 text-white border-emerald-400/50' 
                  : notification.type === 'error' 
                  ? 'bg-gradient-to-r from-red-500/90 to-pink-500/90 text-white border-red-400/50' 
                  : notification.type === 'info'
                  ? 'bg-gradient-to-r from-blue-500/90 to-indigo-500/90 text-white border-blue-400/50' 
                  : 'bg-gradient-to-r from-yellow-500/90 to-orange-500/90 text-black border-yellow-400/50'
              }`}
            >
              <div className="flex items-start gap-3">
                <div className="flex-shrink-0 mt-0.5">
                  {notification.type === 'success' && 'üéâ'}
                  {notification.type === 'error' && '‚ö†Ô∏è'}
                  {notification.type === 'info' && 'üí°'}
                  {notification.type === 'warning' && 'üîî'}
                </div>
                <div className="flex-1">
                  {notification.title && (
                    <div className="font-semibold text-sm mb-1">{notification.title}</div>
                  )}
                  <div className="text-sm opacity-95">{notification.message}</div>
                </div>
              </div>
            </motion.div>
          ))}
        </AnimatePresence>

        {/* Demo Mode Banner */}
        {uiState.isDemoMode && (
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            className="fixed top-20 left-1/2 transform -translate-x-1/2 z-40 bg-gradient-to-r from-yellow-400/95 to-orange-500/95 backdrop-blur-lg border border-orange-300/50 rounded-2xl px-6 py-3 shadow-2xl"
          >
            <div className="flex items-center gap-3">
              <span className="text-2xl animate-pulse">üé≠</span>
              <span className="text-black font-semibold">Tryb Demonstracyjny</span>
            </div>
          </motion.div>
        )}

        {/* Loading Overlay */}
        <AnimatePresence>
          {loadingState.isInitializing && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="fixed inset-0 z-50 bg-gradient-to-br from-indigo-900/95 via-purple-900/95 to-pink-900/95 backdrop-blur-lg flex items-center justify-center"
            >
              <div className="text-center">
                <div className="w-24 h-24 mx-auto mb-8 bg-gradient-to-r from-violet-500 to-purple-500 rounded-full flex items-center justify-center">
                  <span className="text-3xl font-bold text-white">‚ú®</span>
                </div>
                <h1 className="text-4xl font-bold mb-3 text-white">Analizujemy Twoje CV</h1>
                <p className="text-purple-200 text-lg">Przygotowujemy optymalizacjƒô ATS</p>
              </div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Main Content */}
        <div className="relative z-10 mx-auto px-4 py-8 pt-24">
          {/* Header */}
          <motion.div 
            initial={{ opacity: 0, y: -50 }}
            animate={{ opacity: 1, y: 0 }}
            className="text-center mb-12"
          >
            <h1 className="text-5xl font-bold text-white mb-4 bg-gradient-to-r from-violet-400 to-fuchsia-400 bg-clip-text text-transparent">
              {t.title}
            </h1>
            <p className="text-xl text-gray-300">{t.subtitle}</p>
            
            {/* ATS Score Display */}
            <div className="mt-8">
              <div className="inline-flex items-center bg-white/10 backdrop-blur-sm rounded-full px-6 py-3 border border-violet-400/30">
                <span className="text-white mr-3">{t.atsScore}:</span>
                <span className="text-3xl font-bold text-violet-400">
                  {metricsState.atsScore}
                </span>
                <span className="text-violet-400 text-xl ml-1">%</span>
              </div>
            </div>

            {/* Language Toggle */}
            <div className="mt-6">
              <button
                onClick={() => setLanguage(language === 'pl' ? 'en' : 'pl')}
                className="bg-white/10 backdrop-blur-sm px-4 py-2 rounded-lg text-white border border-violet-400/30 hover:bg-violet-500/20"
              >
                {language === 'pl' ? 'üá∫üá∏ English' : 'üáµüá± Polski'}
              </button>
            </div>
          </motion.div>

          {/* Template Selection */}
          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="mb-8"
          >
            <div className="bg-black/30 backdrop-blur-md rounded-2xl p-6 border border-purple-500/30">
              <h2 className="text-2xl font-bold text-white mb-6">{t.selectTemplate}</h2>
              <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-4">
                {Object.entries(t.templates).map(([key, name]) => {
                  const isAccessible = planTemplates[appState.userPlan]?.includes(key);
                  return (
                    <button
                      key={key}
                      onClick={() => isAccessible ? updateAppState({ selectedTemplate: key }) : null}
                      className={`p-4 rounded-lg border transition-all ${
                        uiState.selectedTemplate === key 
                          ? 'bg-purple-600/30 border-purple-400' 
                          : 'bg-white/5 border-white/20'
                      } ${!isAccessible ? 'opacity-50 cursor-not-allowed' : 'hover:bg-purple-600/20'}`}
                    >
                      <div className="text-white font-medium">{name}</div>
                      {!isAccessible && (
                        <div className="text-xs text-yellow-400 mt-1">
                          üîí {appState.userPlan === 'basic' ? 'Gold+' : 'Premium'}
                        </div>
                      )}
                    </button>
                  );
                })}
              </div>
            </div>
          </motion.div>

          {/* CV Preview */}
          <motion.div 
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            className="mb-8"
          >
            <div className="bg-black/30 backdrop-blur-md rounded-2xl p-6 border border-purple-500/30">
              <h2 className="text-2xl font-bold text-white mb-6">PodglƒÖd CV</h2>
              <div ref={cvPreviewRef} className="bg-white rounded-lg p-4 max-h-96 overflow-y-auto">
                {TemplateRenderer}
              </div>
            </div>
          </motion.div>

          {/* Action Buttons */}
          <motion.div 
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4"
          >
            <button
              onClick={optimizeWithAI}
              disabled={loadingState.isOptimizing || appState.userPlan === 'basic'}
              className="bg-gradient-to-r from-violet-600 to-purple-600 text-white p-6 rounded-full font-bold shadow-2xl disabled:opacity-50"
            >
              {loadingState.isOptimizing ? '‚è≥' : 'ü§ñ'} {t.optimizeWithAI}
            </button>

            <button
              onClick={exportToPDF}
              disabled={loadingState.isExporting}
              className="bg-gradient-to-r from-emerald-500 to-green-500 text-white p-6 rounded-full font-bold shadow-2xl"
            >
              üìÑ {t.downloadPdf}
            </button>

            <button
              onClick={exportToDOCX}
              disabled={loadingState.isExporting || appState.userPlan === 'basic'}
              className="bg-gradient-to-r from-blue-500 to-indigo-500 text-white p-6 rounded-full font-bold shadow-2xl disabled:opacity-50"
            >
              üìù {t.downloadDocx}
            </button>

            <button
              onClick={() => toggleModal('email', true)}
              disabled={appState.userPlan === 'basic'}
              className="bg-gradient-to-r from-orange-500 to-red-500 text-white p-6 rounded-full font-bold shadow-2xl disabled:opacity-50"
            >
              üìß {t.sendEmail}
            </button>
          </motion.div>

          {/* Plan Upgrade Banner */}
          {appState.userPlan === 'basic' && (
            <motion.div 
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              className="mt-8 bg-gradient-to-r from-purple-900/50 to-pink-900/50 backdrop-blur-md p-8 rounded-2xl text-center border border-purple-500/30"
            >
              <h3 className="text-2xl font-bold text-white mb-3">üöÄ Ulepsz do Gold/Premium!</h3>
              <p className="text-white/90 mb-6">Odblokuj wszystkie szablony i funkcje</p>
              <div className="flex justify-center gap-4">
                <button className="bg-gradient-to-r from-yellow-500 to-orange-500 text-white px-8 py-3 rounded-full font-bold">
                  ‚≠ê Gold - 49 PLN
                </button>
                <button className="bg-gradient-to-r from-purple-600 to-pink-600 text-white px-8 py-3 rounded-full font-bold">
                  üíé Premium - 79 PLN
                </button>
              </div>
            </motion.div>
          )}
        </div>

        {/* Email Modal */}
        <AnimatePresence>
          {uiState.modals.email && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm"
              onClick={() => toggleModal('email', false)}
            >
              <motion.div
                initial={{ scale: 0.9 }}
                animate={{ scale: 1 }}
                className="bg-white rounded-2xl p-8 max-w-md w-full mx-4"
                onClick={(e) => e.stopPropagation()}
              >
                <h2 className="text-2xl font-bold mb-4">Wy≈õlij CV mailem</h2>
                <form onSubmit={(e) => {
                  e.preventDefault();
                  const formData = new FormData(e.target);
                  sendEmail({
                    to: formData.get('email'),
                    subject: formData.get('subject')
                  });
                }}>
                  <input
                    type="email"
                    name="email"
                    required
                    className="w-full p-3 border rounded-lg mb-4"
                    placeholder="hr@firma.com"
                  />
                  <input
                    type="text"
                    name="subject"
                    className="w-full p-3 border rounded-lg mb-6"
                    placeholder="Aplikacja na stanowisko..."
                  />
                  <div className="flex gap-3">
                    <button type="submit" className="flex-1 bg-blue-600 text-white p-3 rounded-lg font-semibold">
                      Wy≈õlij
                    </button>
                    <button type="button" onClick={() => toggleModal('email', false)} className="flex-1 bg-gray-200 text-gray-700 p-3 rounded-lg font-semibold">
                      Anuluj
                    </button>
                  </div>
                </form>
              </motion.div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </>
  );
}

// ============================================
// SECTION 23: EXPORT COMPONENT
// ============================================

export default function WrappedSuccess() {
  return (
    <ErrorBoundary>
      <Success />
    </ErrorBoundary>
  );
}