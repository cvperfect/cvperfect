const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

async function testCVParsing() {
    console.log('üß™ TEST CV PARSING PIPELINE üß™\n');

    // Test CV data - 2-page equivalent
    const testCV = `
Konrad Jak√≥bczak
Email: konrad11811@wp.pl
Telefon: 570 625 098
Adres: ul. Przyk≈Çadowa 123, 00-000 Warszawa

PROFIL ZAWODOWY
Do≈õwiadczony specjalista w obs≈Çudze klienta z 8-letnim sta≈ºem w r√≥≈ºnych bran≈ºach. Wykazujƒô siƒô wysokimi umiejƒôtno≈õciami komunikacyjnymi i zdolno≈õciƒÖ do rozwiƒÖzywania problem√≥w. Skutecznie zarzƒÖdzam czasem i pracujƒô pod presjƒÖ termin√≥w.

DO≈öWIADCZENIE ZAWODOWE

Konsultant ds. Obs≈Çugi Klienta | ABC Corporation | 2020-2024
‚Ä¢ Obs≈Çuga 50+ klient√≥w dziennie przez telefon i email
‚Ä¢ RozwiƒÖzywanie skomplikowanych reklamacji i problem√≥w technicznych
‚Ä¢ Wsp√≥≈Çpraca z dzia≈Çem technicznym w celu szybkiego rozwiƒÖzania problem√≥w
‚Ä¢ Prowadzenie szkole≈Ñ dla nowych pracownik√≥w
‚Ä¢ OsiƒÖgniƒôcie 95% satysfakcji klient√≥w w ankietach oceny

Sprzedawca | Sklep DEF | 2018-2020  
‚Ä¢ Sprzeda≈º produkt√≥w elektronicznych i doradztwo klientom
‚Ä¢ Realizacja cel√≥w sprzeda≈ºowych na poziomie 110% miesiƒôcznie
‚Ä¢ Prowadzenie inwentaryzacji i kontrola stanu magazynu
‚Ä¢ Obs≈Çuga kasy fiskalnej i systemu POS
‚Ä¢ Budowanie d≈Çugotrwa≈Çych relacji z klientami sta≈Çymi

Logistyk | Firma GHI | 2016-2018
‚Ä¢ Koordynacja dostaw i zarzƒÖdzanie magazynem
‚Ä¢ Optymalizacja tras dostawczych
‚Ä¢ Wsp√≥≈Çpraca z kurierami i firmami transportowymi  
‚Ä¢ Nadz√≥r nad jako≈õciƒÖ pakowania produkt√≥w
‚Ä¢ Utrzymanie 98% terminowo≈õci dostaw

WYKSZTA≈ÅCENIE

Technikum Ekonomiczne im. Jana Kowalskiego, Warszawa | 2012-2016
Kierunek: Technik handlowiec
Dyplom z wyr√≥≈ºnieniem

Kursy i certyfikaty:
‚Ä¢ Kurs Obs≈Çugi Klienta - Centrum Szkoleniowe XYZ (2019)
‚Ä¢ Certyfikat Microsoft Office - podstawowy i zaawansowany (2020)
‚Ä¢ Szkolenie z zarzƒÖdzania stresem w pracy (2021)
‚Ä¢ Kurs sprzeda≈ºy konsultacyjnej (2022)

UMIEJƒòTNO≈öCI

Umiejƒôtno≈õci techniczne:
‚Ä¢ Znajomo≈õƒá pakietu Microsoft Office (Word, Excel, PowerPoint)
‚Ä¢ Obs≈Çuga system√≥w CRM (Salesforce, HubSpot)
‚Ä¢ Znajomo≈õƒá jƒôzyka angielskiego - poziom B2
‚Ä¢ Podstawy jƒôzyka niemieckiego - poziom A2
‚Ä¢ Obs≈Çuga kas fiskalnych i system√≥w POS

Umiejƒôtno≈õci miƒôkkie:
‚Ä¢ Doskona≈Çe umiejƒôtno≈õci komunikacyjne
‚Ä¢ ZarzƒÖdzanie czasem i organizacja pracy
‚Ä¢ RozwiƒÖzywanie problem√≥w i my≈õlenie analityczne
‚Ä¢ Praca w zespole i indywidualna
‚Ä¢ Odporno≈õƒá na stres i pracƒô pod presjƒÖ czasu
‚Ä¢ Elastyczno≈õƒá i szybka adaptacja do zmian

JƒòZYKI OBCE
‚Ä¢ Polski - jƒôzyk ojczysty
‚Ä¢ Angielski - poziom B2 (bieg≈Çy)
‚Ä¢ Niemiecki - poziom A2 (podstawowy)

ZAINTERESOWANIA
Czytanie ksiƒÖ≈ºek biznesowych, podr√≥≈ºe, gotowanie, sport (pi≈Çka no≈ºna, siatk√≥wka)
    `.trim();

    console.log('1Ô∏è‚É£ Original CV length:', testCV.length, 'characters');
    console.log('2Ô∏è‚É£ Testing API /analyze...\n');

    try {
        const response = await fetch('http://localhost:3004/api/analyze', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                currentCV: testCV,
                jobPosting: 'Specjalista ds. Obs≈Çugi Klienta w nowoczesnej firmie IT',
                email: 'test@cvperfect.pl',
                paid: true,
                sessionId: 'test_parsing_123'
            })
        });

        if (!response.ok) {
            throw new Error(`API error: ${response.status}`);
        }

        const result = await response.json();

        if (result.success) {
            console.log('‚úÖ AI Response received');
            console.log('üìä Optimized CV length:', result.optimizedCV.length, 'characters');
            console.log('üìù First 500 chars of optimized CV:');
            console.log(result.optimizedCV.substring(0, 500) + '...\n');

            // Test the parsing function
            console.log('3Ô∏è‚É£ Testing parseOptimizedCV function...\n');
            
            // Simulate the parsing function from success.js
            const parseOptimizedCV = (htmlContent) => {
                console.log('üîç Raw HTML input length:', htmlContent.length);
                
                const nameMatch = htmlContent.match(/<h1[^>]*>(.*?)<\/h1>/i);
                const emailMatch = htmlContent.match(/([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/);
                const phoneMatch = htmlContent.match(/(\+?[\d\s\-\(\)]{9,})/);
                
                console.log('üìù Extracted basic data:');
                console.log('   Name:', nameMatch ? nameMatch[1].trim() : 'NOT FOUND');
                console.log('   Email:', emailMatch ? emailMatch[1] : 'NOT FOUND');
                console.log('   Phone:', phoneMatch ? phoneMatch[1].trim() : 'NOT FOUND');
                
                // Extract experience entries
                const experiencePatterns = [
                    /<li[^>]*>(.*?)<\/li>/gi,
                    /<p[^>]*class="[^"]*experience[^"]*"[^>]*>(.*?)<\/p>/gi,
                    /<div[^>]*class="[^"]*job[^"]*"[^>]*>(.*?)<\/div>/gi,
                    /(\d{4}[\s\-]\d{4}.*?(?=\n\n|\n\d{4}|$))/gi
                ];
                
                let allExperience = [];
                experiencePatterns.forEach((pattern, index) => {
                    const matches = htmlContent.match(pattern) || [];
                    console.log(`   Experience pattern ${index + 1}: ${matches.length} matches`);
                    matches.forEach(match => {
                        const cleanText = match.replace(/<[^>]*>/g, '').trim();
                        if (cleanText && cleanText.length > 10) {
                            allExperience.push(cleanText);
                        }
                    });
                });
                
                console.log('üíº Total experience entries extracted:', allExperience.length);
                allExperience.slice(0, 3).forEach((exp, i) => {
                    console.log(`   ${i + 1}. ${exp.substring(0, 100)}...`);
                });
                
                return {
                    name: nameMatch ? nameMatch[1].trim() : 'Unknown',
                    email: emailMatch ? emailMatch[1] : '',
                    phone: phoneMatch ? phoneMatch[1].trim() : '',
                    experience: allExperience,
                    experienceCount: allExperience.length
                };
            };
            
            const parsedData = parseOptimizedCV(result.optimizedCV);
            
            console.log('\nüìä PARSING RESULTS:');
            console.log('‚úÖ Name:', parsedData.name);
            console.log('‚úÖ Email:', parsedData.email);
            console.log('‚úÖ Phone:', parsedData.phone);
            console.log('‚úÖ Experience entries:', parsedData.experienceCount);
            console.log('‚úÖ Skills:', parsedData.skills ? parsedData.skills.length : 0);
            
            console.log('\nüîç DETAILED EXPERIENCE ANALYSIS:');
            if (parsedData.experience && parsedData.experience.length > 0) {
                parsedData.experience.slice(0, 5).forEach((exp, i) => {
                    console.log(`${i + 1}. [${exp.length} chars] ${exp.substring(0, 120)}...`);
                });
                
                if (parsedData.experience.length > 5) {
                    console.log(`... and ${parsedData.experience.length - 5} more entries`);
                }
            } else {
                console.log('‚ùå NO EXPERIENCE DATA FOUND!');
            }
            
            if (parsedData.experienceCount < 3) {
                console.log('\n‚ùå PROBLEM DETECTED: Too few experience entries extracted!');
                console.log('üîç Let\'s analyze the HTML structure...\n');
                
                // Analyze HTML structure
                const h2Matches = result.optimizedCV.match(/<h2[^>]*>(.*?)<\/h2>/gi) || [];
                console.log('üìã H2 sections found:', h2Matches.length);
                h2Matches.forEach(h2 => {
                    console.log('   -', h2.replace(/<[^>]*>/g, ''));
                });
                
                const ulMatches = result.optimizedCV.match(/<ul[^>]*>[\s\S]*?<\/ul>/gi) || [];
                console.log('üìù UL lists found:', ulMatches.length);
                
                const liMatches = result.optimizedCV.match(/<li[^>]*>[\s\S]*?<\/li>/gi) || [];
                console.log('üìù LI items found:', liMatches.length);
                
                console.log('\nüîß DEBUGGING: Full HTML structure:');
                console.log(result.optimizedCV);
            }
            
        } else {
            console.error('‚ùå API returned error:', result.error);
        }

    } catch (error) {
        console.error('‚ùå Test failed:', error.message);
    }
}

testCVParsing().catch(console.error);