const fetch = require('node-fetch');

async function testKonradCVFlow() {
  console.log('üß™ Testowanie przep≈Çywu CV Konrada Jak√≥bczaka...\n');
  
  // Twoje rzeczywiste CV kt√≥re wrzuci≈Çe≈õ na platformƒô
  const konradCV = `
Konrad Jak√≥bczak
konrad11811@wp.pl
570 625 098

DO≈öWIADCZENIE ZAWODOWE:

Kurier - DPD
Dostarczanie przesy≈Çek i paczek do klient√≥w

Dostawca - Glovo  
Dostawa zakup√≥w do klient√≥w

Sprzedawca - Play
Sprzeda≈º produkt√≥w telekomunikacyjnych Play

WYKSZTA≈ÅCENIE:
Wy≈ºsze

UMIEJƒòTNO≈öCI:
Obs≈Çuga klienta
Prawo jazdy kat. B
`;

  try {
    console.log('üìã ORYGINALNE CV:');
    console.log('-----------------------------------');
    console.log(konradCV);
    console.log('-----------------------------------');
    console.log('D≈Çugo≈õƒá:', konradCV.length, 'znak√≥w\n');
    
    // Krok 1: Wy≈õlij do API
    console.log('üì° Wysy≈Çanie do API /analyze...');
    
    const response = await fetch('http://localhost:3004/api/analyze', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        currentCV: konradCV,
        email: 'konrad11811@wp.pl',
        paid: true,
        plan: 'premium',
        sessionId: 'sess_test_konrad'
      })
    });

    const result = await response.json();
    
    if (result.success) {
      console.log('‚úÖ Odpowied≈∫ AI otrzymana\n');
      
      console.log('üìä STATYSTYKI:');
      console.log('D≈Çugo≈õƒá oryginalnego CV:', konradCV.length, 'znak√≥w');
      console.log('D≈Çugo≈õƒá zoptymalizowanego CV:', result.optimizedCV.length, 'znak√≥w');
      console.log('Zmiana:', result.optimizedCV.length > konradCV.length ? '+' : '', 
                  result.optimizedCV.length - konradCV.length, 'znak√≥w\n');
      
      console.log('üìÑ ZOPTYMALIZOWANE CV (pierwsze 1000 znak√≥w):');
      console.log('-----------------------------------');
      console.log(result.optimizedCV.substring(0, 1000));
      console.log('-----------------------------------\n');
      
      // Sprawd≈∫ zawarto≈õƒá
      const checks = {
        'Imiƒô - Konrad Jak√≥bczak': result.optimizedCV.includes('Konrad Jak√≥bczak'),
        'Email - konrad11811@wp.pl': result.optimizedCV.includes('konrad11811@wp.pl'),
        'Telefon - 570 625 098': result.optimizedCV.includes('570 625 098'),
        'Do≈õwiadczenie - DPD/Kurier': result.optimizedCV.includes('DPD') || result.optimizedCV.includes('Kurier'),
        'Do≈õwiadczenie - Glovo/Dostawca': result.optimizedCV.includes('Glovo') || result.optimizedCV.includes('Dostawca'),
        'Do≈õwiadczenie - Play/Sprzedawca': result.optimizedCV.includes('Play') || result.optimizedCV.includes('Sprzedawca'),
        'Wykszta≈Çcenie - Wy≈ºsze': result.optimizedCV.includes('Wy≈ºsze') || result.optimizedCV.includes('Higher'),
        'Umiejƒôtno≈õci - Obs≈Çuga klienta': result.optimizedCV.includes('Obs≈Çuga klienta') || result.optimizedCV.includes('obs≈Çuga')
      };
      
      console.log('üîç WERYFIKACJA ZAWARTO≈öCI:');
      let allGood = true;
      for (const [check, passed] of Object.entries(checks)) {
        console.log(`${passed ? '‚úÖ' : '‚ùå'} ${check}`);
        if (!passed) allGood = false;
      }
      
      console.log(`\n${allGood ? 'üéâ' : '‚ö†Ô∏è'} WYNIK: ${allGood ? 'WSZYSTKIE DANE ZACHOWANE!' : 'BRAKUJE NIEKT√ìRYCH DANYCH'}`);
      
      // Sprawd≈∫ czy CV nie jest za kr√≥tkie
      if (result.optimizedCV.length < konradCV.length * 0.8) {
        console.log('\n‚ö†Ô∏è PROBLEM: CV zosta≈Ço skr√≥cone o ponad 20%!');
        console.log('To nie powinno siƒô zdarzyƒá - AI ma rozszerzaƒá, nie skracaƒá.');
      }
      
      // Sprawd≈∫ struktura HTML
      const hasProperHTML = result.optimizedCV.includes('<h1>') && 
                           result.optimizedCV.includes('<h2>') &&
                           result.optimizedCV.includes('</h1>') &&
                           result.optimizedCV.includes('</h2>');
      
      console.log(`\nüìù Struktura HTML: ${hasProperHTML ? '‚úÖ Poprawna' : '‚ùå Brak tag√≥w HTML'}`);
      
    } else {
      console.error('‚ùå B≈ÇƒÖd API:', result.error);
    }
    
  } catch (error) {
    console.error('‚ùå B≈ÇƒÖd po≈ÇƒÖczenia:', error.message);
  }
}

testKonradCVFlow();