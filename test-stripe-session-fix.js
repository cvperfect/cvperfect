console.log('Testing Stripe Session Fix...'); const http = require('http'); const TEST_SESSIONS = ['cs_test_a1C64g09uvShothGk62D5mDgv7V4VJvYMz7bA9n7tj1rXucpUonXUg5EmG', 'test123']; async function testSession(sessionId) { try { const response = await new Promise((resolve, reject) => { const request = http.get('http://localhost:3000/api/get-session-data?sessionId=' + sessionId, (res) => { let data = ''; res.on('data', chunk => data += chunk); res.on('end', () => { try { resolve({status: res.statusCode, data: JSON.parse(data)}); } catch(e) { resolve({status: res.statusCode, data, parseError: e.message}); } }); }); request.on('error', reject); request.setTimeout(5000, () => { request.destroy(); reject(new Error('Timeout')); }); }); console.log('Session', sessionId.substring(0,20) + '...', 'Status:', response.status, response.status === 200 ? 'SUCCESS' : 'ERROR'); if(response.status === 200 && response.data.cvData) { console.log('  CV Data:', response.data.cvData.includes('Jan Kowalski') ? 'FOUND' : 'MISSING'); console.log('  Plan:', response.data.plan); console.log('  Source:', response.data.source || 'none'); } return response.status === 200; } catch(error) { console.log('Session', sessionId.substring(0,20) + '...', 'ERROR:', error.message); return false; } } async function runTests() { console.log('Running Stripe Session Fix Tests...'); const results = []; for(const session of TEST_SESSIONS) { const result = await testSession(session); results.push(result); await new Promise(r => setTimeout(r, 500)); } const passed = results.filter(r => r).length; console.log('Results:', passed, 'passed,', results.length - passed, 'failed'); console.log(passed === results.length ? 'ALL TESTS PASSED\!' : 'SOME TESTS FAILED'); } runTests().catch(console.error);
